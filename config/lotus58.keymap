/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

&left_encoder { status = "disabled"; };
// &right_encoder { steps = <20>; };
// &sensors {
//   sensors = <&right_encoder>;
//   triggers-per-rotation = <20>;
// };

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label="BASE";
//   ------------------------------------------------------------------------------------------------------------
//  0|  ESC  |  1  |  2  |  3   |  4   |  5   |                     |  6   |  7    |  8    |  9   |   0   |   =   | 11
// 12|  TAB  |  Q  |  W  |  E   |  R   |  T   |                     |  Y   |  U    |  I    |  O   |   P   |   [   | 23
// 24|  SFT  |  A  |  S  |  D   |  F   |  G   |  RESET  |  | RESET  |  H   |  J    |  K    |  L   |   ;   | ' SFT | 37
// 38|  CTRL |  Z  |  X  |  C   |  V   |  B   |  MUTE   |  | PLAY   |  N   |  M    |  ,    |  .   |   /   | \ CTRL| 51
// 52                    |ENT RS|  ALT | SPACE|DELETE LW|  |ENTER RS| BSPC |  ] LW | RGUI  |                        59
            bindings = <
&kp ESC   &kp N1 &kp N2   &kp N3     &kp N4    &kp N5                               &kp N6    &kp N7      &kp N8    &kp N9   &kp N0   &kp BSPC
&kp TAB   &kp Q  &kp W    &kp E      &kp R     &kp T                                &kp Y     &kp U       &kp I     &kp O    &kp P    &kp MINUS
&kp LSHFT &kp A  &kp S    &kp D      &kp F     &kp G      &trans         &kp INS    &kp H     &kp J       &kp K     &kp L    &kp SEMI &kp SQT
&kp LCTRL &kp Z  &kp X    &kp C      &kp V     &kp B      &kp LBKT       &kp RBKT   &kp N     &kp M       &kp COMMA &kp DOT  &kp FSLH &kp RET
                          &kp LALT   &kp LGUI  &mo 1      &kp SPACE      &kp SPACE  &mo 2  &kp BSPC  &kp RGUI  
            >;

            // sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp C_VOL_UP C_VOL_DN>;
            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        lower_layer {
            label="LOWER";
// ------------------------------------------------------------------------------------------------------------
// | `     |  F1 |  F2 |  F3  |  F4  |  F5  |                   |  F6  |  F7   |  F8   |  F9  |  F10  |  F11  |
// |       |  !  | HOME|   ^  |  END |  %   |                   | VOL^ |  PGUP |  INS  |  ^   |  PSCR |   -   |
// |       |  #  |  <- |   v  | ->   |  $   |        |  |       | VOLv |    <- |   ^   |  ->  |   ~   |   _   |
// |       |  @  |  -  |  (   |  )   |  &   |        |  |       | MUTE |  PGDN |   v   |  :   |   *   |   |   |
//                     |  F11 |      |      |        |  |       |      |       |  F12  |
            bindings = <
&kp GRAVE  &kp F1    &kp F2    &kp F3      &kp F4     &kp F5                     &kp F6        &kp F7     &kp F8    &kp F9     &kp F10   &kp F11
&trans     &trans  	 &kp UP    &trans      &trans     &trans                     &trans        &trans     &trans    &trans     &trans    &trans
&trans     &kp LEFT  &kp DOWN  &kp RIGHT   &trans     &trans    &trans   &trans  &trans        &trans     &trans    &trans     &trans    &trans
&bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &trans &trans &trans   &trans  &trans        &trans     &trans    &trans     &trans    &trans
                               &trans      &trans     &trans    &trans   &trans  &trans        &trans     &trans
            >;

            // sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp C_VOL_UP C_VOL_DN>;
            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        raise_layer {
            label="RAISE";
// ------------------------------------------------------------------------------------------------------------
// |BTCLR| BT1  | BT2  |  BT3  |  BT4  |  BT5 |                |OUTTOG|OUTUSB| OUTBT |      | RESET | FLASH |
// |     | INS  | PSCR | GUI   | RESET |      |                | PGUP |      |   ^   |      |       |       |
// |     | ALT  | CTRL | SHIFT | FLASH | CAPS |      |  |      | PGDN |   <- |   v   |  ->  |  DEL  | BSPC  |
// |     | UNDO | CUT  | COPY  | PASTE |      |      |  |      |      |  |>  |  <|<| | |>|> |       |       |
//                     |       |       |      |      |  |      |      |      |       |
            bindings = <
&trans     &trans       &trans       &trans       &trans       &trans                          &trans        &trans        &trans        &trans     &trans  &kp DEL
&trans     &trans       &trans       &trans       &sys_reset   &trans                          &kp PG_UP     &trans        &kp UP        &trans     &trans  &kp PSCRN
&trans     &trans       &trans       &trans       &bootloader  &trans       &trans   &trans    &kp PG_DN     &kp LEFT      &kp DOWN      &trans     &trans  &kp BSPC
&trans     &trans       &trans       &trans       &trans       &trans       &trans   &trans    &kp KP_PLUS   &kp MINUS     &kp EQUAL     &trans     &trans  &kp BSLH
                                     &trans       &trans       &trans       &trans   &trans    &trans        &trans        &trans   
            >;

            // sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp C_VOL_UP C_VOL_DN>;
            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };
    };
};

// &right_encoder: encoder_right {
//     compatible = "alps,ec11";
//     a-gpios = <&pro_micro 21 (GPIO_ACTIVE_HIGH | GPIO_PULL_UP)>;
//     b-gpios = <&pro_micro 20 (GPIO_ACTIVE_HIGH | GPIO_PULL_UP)>;
//     steps = <80>;
// };

// &sensors {
//     compatible = "zmk,keymap-sensors";
//     sensors = <&right_encoder>;
//     triggers-per-rotation = <20>;
// };

// &right_encoder { steps = <36>; };

// &sensors {
//     triggers-per-rotation = <18>;
// };

// / {
//     sensors {
//         triggers-per-rotation = <20>; // change this to the number of detents your encoder has
//     };
// };

// &right_encoder {
//     steps = <80>; // set this to be 4x triggers-per-rotation first
//                   // and then if that doesn't trigger one press per detent,
//                   // try 2x or 1x.
// };